// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod nylon_dispatcher {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum NylonDispatcherOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct NylonDispatcher<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for NylonDispatcher<'a> {
        type Inner = NylonDispatcher<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> NylonDispatcher<'a> {
        pub const VT_REQUEST_ID: flatbuffers::VOffsetT = 4;
        pub const VT_NAME: flatbuffers::VOffsetT = 6;
        pub const VT_DATA: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            NylonDispatcher { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args NylonDispatcherArgs<'args>,
        ) -> flatbuffers::WIPOffset<NylonDispatcher<'bldr>> {
            let mut builder = NylonDispatcherBuilder::new(_fbb);
            if let Some(x) = args.data {
                builder.add_data(x);
            }
            if let Some(x) = args.name {
                builder.add_name(x);
            }
            if let Some(x) = args.request_id {
                builder.add_request_id(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn request_id(&self) -> &'a str {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(NylonDispatcher::VT_REQUEST_ID, None)
                    .unwrap()
            }
        }
        #[inline]
        pub fn name(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(NylonDispatcher::VT_NAME, None)
            }
        }
        #[inline]
        pub fn data(&self) -> flatbuffers::Vector<'a, u8> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        NylonDispatcher::VT_DATA,
                        None,
                    )
                    .unwrap()
            }
        }
    }

    impl flatbuffers::Verifiable for NylonDispatcher<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "request_id",
                    Self::VT_REQUEST_ID,
                    true,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "data",
                    Self::VT_DATA,
                    true,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct NylonDispatcherArgs<'a> {
        pub request_id: Option<flatbuffers::WIPOffset<&'a str>>,
        pub name: Option<flatbuffers::WIPOffset<&'a str>>,
        pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for NylonDispatcherArgs<'a> {
        #[inline]
        fn default() -> Self {
            NylonDispatcherArgs {
                request_id: None, // required field
                name: None,
                data: None, // required field
            }
        }
    }

    pub struct NylonDispatcherBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NylonDispatcherBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_request_id(&mut self, request_id: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                NylonDispatcher::VT_REQUEST_ID,
                request_id,
            );
        }
        #[inline]
        pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(NylonDispatcher::VT_NAME, name);
        }
        #[inline]
        pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(NylonDispatcher::VT_DATA, data);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> NylonDispatcherBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            NylonDispatcherBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<NylonDispatcher<'a>> {
            let o = self.fbb_.end_table(self.start_);
            self.fbb_
                .required(o, NylonDispatcher::VT_REQUEST_ID, "request_id");
            self.fbb_.required(o, NylonDispatcher::VT_DATA, "data");
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for NylonDispatcher<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("NylonDispatcher");
            ds.field("request_id", &self.request_id());
            ds.field("name", &self.name());
            ds.field("data", &self.data());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `NylonDispatcher`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nylon_dispatcher_unchecked`.
    pub fn root_as_nylon_dispatcher(
        buf: &[u8],
    ) -> Result<NylonDispatcher, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<NylonDispatcher>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `NylonDispatcher` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_nylon_dispatcher_unchecked`.
    pub fn size_prefixed_root_as_nylon_dispatcher(
        buf: &[u8],
    ) -> Result<NylonDispatcher, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<NylonDispatcher>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `NylonDispatcher` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nylon_dispatcher_unchecked`.
    pub fn root_as_nylon_dispatcher_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<NylonDispatcher<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<NylonDispatcher<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `NylonDispatcher` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nylon_dispatcher_unchecked`.
    pub fn size_prefixed_root_as_nylon_dispatcher_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<NylonDispatcher<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<NylonDispatcher<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a NylonDispatcher and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `NylonDispatcher`.
    pub unsafe fn root_as_nylon_dispatcher_unchecked(buf: &[u8]) -> NylonDispatcher {
        flatbuffers::root_unchecked::<NylonDispatcher>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed NylonDispatcher and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `NylonDispatcher`.
    pub unsafe fn size_prefixed_root_as_nylon_dispatcher_unchecked(buf: &[u8]) -> NylonDispatcher {
        flatbuffers::size_prefixed_root_unchecked::<NylonDispatcher>(buf)
    }
    #[inline]
    pub fn finish_nylon_dispatcher_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<NylonDispatcher<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_nylon_dispatcher_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<NylonDispatcher<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod nylon_dispatcher

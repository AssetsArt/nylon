// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package nylon_http_context

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NylonHttpContext struct {
	_tab flatbuffers.Table
}

func GetRootAsNylonHttpContext(buf []byte, offset flatbuffers.UOffsetT) *NylonHttpContext {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NylonHttpContext{}
	x.Init(buf, n+offset)
	return x
}

func FinishNylonHttpContextBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNylonHttpContext(buf []byte, offset flatbuffers.UOffsetT) *NylonHttpContext {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NylonHttpContext{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNylonHttpContextBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *NylonHttpContext) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NylonHttpContext) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NylonHttpContext) End() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *NylonHttpContext) MutateEnd(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *NylonHttpContext) Request(obj *NylonHttpRequest) *NylonHttpRequest {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NylonHttpRequest)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *NylonHttpContext) Response(obj *NylonHttpResponse) *NylonHttpResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NylonHttpResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func NylonHttpContextStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func NylonHttpContextAddEnd(builder *flatbuffers.Builder, end bool) {
	builder.PrependBoolSlot(0, end, false)
}
func NylonHttpContextAddRequest(builder *flatbuffers.Builder, request flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(request), 0)
}
func NylonHttpContextAddResponse(builder *flatbuffers.Builder, response flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(response), 0)
}
func NylonHttpContextEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
